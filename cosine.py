# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EDFCSU084X7TbYduE7_G_c2fIRb8B8Vg
"""

import pandas as pd
import numpy as np
import pickle
from sklearn.metrics.pairwise import linear_kernel
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn import metrics
from scipy.spatial.distance import cdist
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
import spacy

#Open the csv file

data=pd.read_csv('data_movies_2.csv')

with open("lastVector.sav",mode='rb') as model_f:
    vectors = pickle.load(model_f)

def cosine_similarity(a, b):
    return np.dot(a, b)/np.sqrt(np.dot(a, a)*np.dot(b, b))

nlp=spacy.load('en_core_web_lg')
X = vectors
pca = PCA(n_components=3)
pca_result = pca.fit_transform(X)

def movie_similarities(plot, **kwargs):
        
    # optional parameters
    params = {'new_plot' : True, # if the plot isn't in the dataset
              'n' : 10, # no. results
              'rating' : 0.0, # list movies rated above a certain IMDB score
              'nan' : True} # don't include titles without an IMDB score
    
    for key, value in kwargs.items():
        params[key] = value
    
    x = int(params['new_plot'])
    
    movie_vec = nlp(plot).vector
    vec_mean = vectors.mean(axis=0)
    centered = vectors - vec_mean
    sims = np.array([cosine_similarity(movie_vec - vec_mean, vec) for vec in centered])
    
    movie_index = []
    movie_title = []
    movie_year = []
    movie_rating = []
    movie_cosine = []
    
    pca_0 = []
    pca_1 = []
    pca_2 = []
    
    for i in sorted(sims)[-2+x::-1]:
        if not params['nan'] and np.isnan(data.iloc[np.where(sims == i)[0][0]]["vote_average"]):
            pass
        
        elif (data.iloc[np.where(sims == i)[0][0]]["vote_average"] >= params['rating'] \
                or np.isnan(data.iloc[np.where(sims == i)[0][0]]["vote_average"])):
            
            index = np.where(sims == i)[0][0]
            
            movie_index.append(index)
            movie_title.append(data.iloc[index]['Title'])
            movie_year.append(data.iloc[index]["Release Year"])
            movie_rating.append(data.iloc[index]["vote_average"])
            movie_cosine.append(round(i,2))
            
            pca_0.append(pca_result[:,0][index])
            pca_1.append(pca_result[:,1][index])
            pca_2.append(pca_result[:,2][index])
                        
            params['n'] -= 1
            
        if params['n'] == 0:
            break
            
    return  pd.DataFrame({'Title':movie_title,
                        'Year':movie_year,
                        'Rating':movie_rating,
                        'Cosine':movie_cosine,
                        'pca_0':pca_0,
                        'pca_1':pca_1,
                        'pca_2':pca_2},
                        index=movie_index)

test = data[data.Title.str.contains('Frozen')]
print(test)
plot = data.Plot[10066]
print(plot[:500])